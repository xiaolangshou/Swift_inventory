1.大数相乘

(Java case通过率为100%)

import java.util.Scanner;

public class Main {
      public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s1 = scanner.next();
        String s2 = scanner.next();
        // 先不做校验。
          int sumLen = s1.length() + s2.length();
          int[] res = new int[sumLen];
          for(int i = 0; i< s1.length(); i++) {
               int num1 = s1.charAt(s1.length() -1 - i ) - '0';
              for(int j  = 0; j< s2.length(); j++) {
                  int num2 = s2.charAt(s2.length() -1 - j) - '0';
                  res[i +j ] += num1 * num2;                         
              }
          }
          for(int i = 0; i< res.length - 1; i++) {
              if(res[i] >= 10) {
                  res[i+1] += res[i] / 10;
                  res[i] %= 10;
              }
          }
          int i = res.length -1;
          for(; i> 0 && res[i] == 0; i--) {} // 去除结果前面的 0
          StringBuilder sb = new StringBuilder();
          for(; i>=0; i--) {
              sb.append(res[i]);
          }
          System.out.println(sb.toString());
 
    }
}





(python case通过率为66.67%)

import sys
s=sys.stdin.readline().strip().split()
def karatsuba_mul(num1, num2):
    #karatsuba算法
    if len(str(num1))==1 or len(str(num2))==1:
        return num1*num2
    n=max(len(str(num1)),len(str(num2)))
    half=n//2
    
    a=num1//10**half
    b=num1%10**half
    c=num2//10**half
    d=num2%10**half
    ac=karatsuba_mul(a,c) #计算a*c
    bd=karatsuba_mul(b,d) #计算b*d
    abcd=karatsuba_mul(a+b,c+d) #计算(a+b)*(c+d)
    adbc=abcd-ac-bd
    return ac*10**(2*half)+adbc*10**half+bd
print(str(karatsuba_mul(int(s[0]), int(s[1]))))





（swift case通过率90%）

import Foundation

        let str = readLine() ?? ""
        var strArr = [String]()
        for v in str.split(separator: " ") {
            strArr.append(String(v))
        }
        // 大数相乘
        func bigNumMutiply(str1: String, str2: String) -> String {

            var sumArr: [Int] = []

            // 各位数字相乘
            for (i,v1) in str1.reversed().enumerated() {
                let num1 = Int(String(v1)) ?? 0
                
                for (j,v2) in str2.reversed().enumerated() {
                    let num2 = Int(String(v2)) ?? 0
                    let index = i + j
                    
                    if sumArr.count > index {
                        sumArr.insert(sumArr[index] + num1 * num2, at: index)
                        sumArr.remove(at: index+1)
                    } else {
                        sumArr.append(num1 * num2)
                    }
                }
            }

            // 处理进位
            var result = ""
            for i in 0..<sumArr.count {
                
                if i < sumArr.count - 1 {
                    if sumArr[i] >= 10 {
                        result.append(String(sumArr[i] % 10))
                        sumArr[i+1] += sumArr[i] / 10
                    } else {
                        result.append(String(sumArr[i]))
                    }
                } else {
                    if sumArr[i] >= 10 {
                        result.append(String(sumArr[i] % 10))
                        result.append(String(sumArr[i] / 10))
                    } else {
                        result.append(String(sumArr[i]))
                    }
                }

            }
            
            return String(result.reversed())
        }
        
        print(bigNumMutiply(str1: strArr[0], str2: strArr[1]))


2.从1到n整数中1出现的次数

 (c++ case通过率100%)

class Solution {
public:
    int NumberOf1Between1AndN_Solution(int n)
    {
        int count=0;
        long long i=1;
        for(i=1;i<=n;i*=10)
        {
            //i表示当前分析的是哪一个数位
            int a = n/i,b = n%i;
            count=count+(a+8)/10*i+(a%10==1)*(b+1);
        }
        return count;
    }
};

(swift 自测通过率100%)

import Foundation

let str = readLine() ?? ""
let num = Int(str) ?? 0

        func numofOne(_ n: Int) {
            var count = 0
            var i = 1
            var current = 0
            var after = 0
            var before = 0
            
            while n/i != 0 {
                current = (n/i)%10
                before = n/(i*10)
                after = n-(n/i)*i
                //如果为0,出现1的次数由高位决定,等于高位数字 * 当前位数
                if (current == 0) {
                    count += before*i
                }
                //如果为1,出现1的次数由高位和低位决定,高位*当前位+低位+1
                else if (current == 1) {
                    count += before * i + after + 1
                }
                //如果大于1,出现1的次数由高位决定,//（高位数字+1）* 当前位数
                else {
                    count += (before + 1) * i
                }
                //前移一位
                i = i*10
            }
            
            print(count)
        }
    
    numofOne(num)


3. 寻找字符串中最长的回文


（python case通过率为100%）

import sys
 
def longestPalindrome(s):
    if s == s[::-1]: return s
    start, maxLen = 0, 1
    for i in range(len(s)):
        if i - maxLen >= 1 and s[i - maxLen -1:i + 1] == s[i - maxLen - 1:i + 1][::-1]:
            start = i - maxLen - 1
            maxLen += 2
            continue
        if i - maxLen >= 0 and s[i - maxLen:i + 1] == s[i - maxLen:i + 1][::-1]:
            start = i - maxLen
            maxLen += 1
    return s[start:start + maxLen]
 
 
for i in sys.stdin.readlines():
    print (longestPalindrome(i.strip()))






(swift case通过率为90.91%)

import Foundation

        let str = readLine() ?? ""

          func longestPalindrome(_ s: String) -> String {
            if s == "" { return "" }
            
            var start = 0, end = 0
            let length = s.count
            let chars: [Character] = [Character](s)
            
            for i in 0..<length {
                let length1 = testPalindrome(chars, i, i)
                let length2 = testPalindrome(chars, i, i+1)
                let length = max(length1, length2)
                if (length > end - start) {
                    start = i - (length - 1) / 2
                    end = i + length/2
                }
            }
             
            return String(chars[start...end])
        }

        func testPalindrome(_ s: [Character], _ left: Int, _ right: Int) -> Int {
            
            let count = s.count
            
            var L = left
            var R = right
            
            while (L>=0 && R < count && s[L] == s[R]) {
                L -= 1
                R += 1
            }
            return R-L-1
        }
    
        print(longestPalindrome(str))
   